version: 2.1
orbs:
  node: circleci/node@1.1.6
jobs:
  build:
    docker: 
          - image: your/image_for_primary_container 
          - image: postgres:9.6.2-alpine 
          environment: 
            POSTGRES_USER: your_postgres_user 
            POSTGRES_DB: your_postgres_test 
            workDir: /your/workdir 

        steps: 
          - checkout 
          - run: 
            name: install dockerize 
            command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz 
            environment: 
              DOCKERIZE_VERSION: v0.3.0 
              - run: 
                name: Wait for db 
                command: dockerize -wait tcp://localhost:5432 -timeout 1m

  test:
    docker:
      - image: circleci/node:10
    environment:
      TEST_DATABASE: circleci
      POSTGRES_USER: circleci
      POSTGRES_DB: circleci
    steps:
      - checkout
      - node/with-cache:
          steps:
            - run: npm install
            - run: 
                command: npm start
                background: true
            # wait for the server to start responding. We expect Bad Request 400 once it starts listening.
            # so override the shell and have the last command be the : { null } command to force exit code 0.
            - run:
                shell: /bin/sh
                command: |
                  wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 http://localhost:8000/graphql
                  :
            - run: npm test
workflows:
    build-and-test:
      jobs:
        - build
        - test